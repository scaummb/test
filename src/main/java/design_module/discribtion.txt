23种设计模式:
1)创建型
    创建型模式是用来创建对象的模式，抽象了实例化的过程，帮助一个系统独立于其他关联对象的创建、组合和表示方式。
所有的创建型模式都有两个主要功能：
　　1.将系统所使用的具体类的信息封装起来
　　2.隐藏类的实例是如何被创建和组织的。外界对于这些对象只知道他们共同的接口，而不清楚其具体的实现细节。
    正因为以上两点，创建型模式在创建什么（what）、由谁来创建（who）、以及何时创建（when）这些方面，都为设计者提供了尽可能大的灵活性。
    创建型模式的作用可以概括为：A.封装创建逻辑，不仅仅是new一个对象那么简单。B.封装创建逻辑变化,客户代码尽量不改变和尽量少修改。
创建型模式有以下几种：

　　1 单例模式（Singleton Pattern）：一个类只有一个实例,而且自行实例化并向整个系统提供这个实例。
　　2 工厂方法模式（Factory Pattern）：在工厂方法模式中，工厂类成为了抽象类，实际的创建工作将由其具体子类来完成。工厂的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中，它强调的是“单个对象”的变化。
　　3 抽象工厂模式（Abstract Factory）：抽象工厂是所有工厂模式中最为抽象且最具有一般性的一种形态。抽象工厂可以向客户提供一个接口，是的客户可以在没有指定产品的情况下，创建多个产品族中的产品对象，强调的是“对象系列”的变化。
        【工厂的工厂叫抽象工厂模式。】
　　4 建造者模式（Builder Pattern）：把构造对象实例的逻辑移到了类的内部，在类的外部定义了该类的构造逻辑。它把一个复杂对象的构造过程从对象的表示中分离出来，其直接效果是将一个复杂的对象简化为一个比较简单的目标对象，强调的是产品的构造过程。
　　5 原型模式（Prototype Pattern）：原型模式和工厂模式一样，同样对客户隐藏了对象创建工作具体的实现细节，但与通过对一个类进行实例化的构造心对象不同的是，原型模式通过复制一个现有的对象生成新对象。

2)结构型
    结构型模式讨论的是类和对象的结构，它采用继承机制来组合接口或实现（类结构型模式），或者通过组合一些对象实现新的功能（对象结构型模式）。
    这些结构型模式在某些方面具有很大的相似性，但侧重点各有不同。
结构型模式有以下几种：

　　6 代理模式（Proxy）：为其他对象提供一种代理以控制对该对象的访问。
        【代理模式分两种：
            静态代理：【构造不同的实体类，显式传参给代理类进行非法调用】
            动态代理：【入参是对象和注解名，或者方法】
            1、实现java的InvocationHandler标准接口，实际上就是反射实现
            2、注解实现，注解定义了业务参数，本质还是反射】

　　7 装饰模式（Decorator）：动态的给一个对象添加一些额外的职责。就增加功能来说，装饰模式比生成子类更灵活。


　　8 适配器模式（Adapter）：将一个类的接口变换成客户端所期待的接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。
        【适配器模式一共可分为三种：
            1\类适配器模式:我们的适配器，继承于源角色并且实现目标角色，这样通过实现目标角色中的方法调用源角色中的方法进行运算，从而达到适配的效果
            2\对象适配器模式:对象适配器是通过组合来实现适配器功能的，即适配器拥有源角色的实例
            3\接口适配器模式:接口适配器相对类适配器和对象适配器而言，接口适配器相对更加灵活，就好比手机适配器中的万能适配器，不管接入的是多少伏的电源，最终都能保证输出电源为5V】

　　9 组合模式（Composite）：也叫合成模式，将对象组合成属性结构一表示“部分-整体”的层次结构，使得用户对单个对象和组成对象的使用具有一致性。是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。
        【组合模式，树形结构组合对象！！】
　　10 桥梁模式（Bridge）：也叫桥接模式，将抽象和实现解耦，是的两者可以独立的变化。
　　11 外观模式（Facade）：也叫门面模式，要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行，外观模式提供一个高层次的接口，使得子系统更易于使用。
　　12 亨元模式（Flyweight）：是池技术的重要实现方式，使用共享对象可有效的支持大量的细粒度的对象
        【支持减少创建对象，提高内存性能】

3)行为型
    行为型设计模式关注的是对象的行为，