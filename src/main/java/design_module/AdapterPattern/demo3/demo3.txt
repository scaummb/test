接口适配器模式（缺省适配模式）
接口适配器模式（缺省适配模式）的思想是，为一个接口提供缺省实现，这样子类可以从这个缺省实现进行扩展，而不必从原有接口进行扩展。

这里提供一个例子。java.awt.KeyListener 是一个键盘监听器接口，我们把这个接口的实现类对象注册进容器后，这个容器就会对键盘行为进行监听

可以看到其实我们只使用到其中一个方法，但必须要把接口中所有方法都实现一遍，如果接口里方法非常多，那岂不是非常麻烦。于是我们引入一个默认适配器，让适配器把接口里的方法都实现一遍，使用时继承这个适配器，把需要的方法实现一遍就好了。JAVA里也为java.awt.KeyListener 提供了这样一个适配器：java.awt.KeyAdapter 。

这样不必再把每个方法都实现一遍，代码看起来简洁多了。在任何时候，如果不准备实现一个接口里的所有方法时，就可以使用“缺省适配模式”制造一个抽象类，实现所有方法，这样，从这个抽象类再继承下去的子类就不必实现所有的方法，只要重写需要的方法就可以了。

也就是说：“接口适配器模式”，准备一个默认适配器(例如：提供了默认方法实现的抽象类，而后子适配器可以继承这个抽象类，有需要的时候再将方法进行覆盖)，从而避免直接实现接口导致将非必要的方法也都默认实现一遍。

工作中，我们也经常碰到这个问题，例如使用了各种Handler来处理不同的业务，这些handler都实现了同一个接口handlerInterface。但是有些接口方法只是handler1用到的，而有些方法只是handler2用到的。怎么办？难道非得在handler1覆盖一遍吗?不用，只要加一个抽象类作为“接口适配器”即可。


